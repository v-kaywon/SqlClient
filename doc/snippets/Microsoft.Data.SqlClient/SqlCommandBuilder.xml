<docs>
    <members name="SqlCommandBuilder">
        <SqlCommandBuilder>
            <summary>
                Automatically generates single-table commands that are used to reconcile changes made to a
                <see cref="T:System.Data.DataSet" />
                with the associated SQL Server database. This class cannot be inherited.
            </summary>
            <remarks>
                <format type="text/markdown"><![CDATA[

## Remarks
The <xref:Microsoft.Data.SqlClient.SqlDataAdapter> does not automatically generate the Transact-SQL statements required to reconcile changes made to a <xref:System.Data.DataSet> with the associated instance of SQL Server. However, you can create a <xref:Microsoft.Data.SqlClient.SqlCommandBuilder> object to automatically generate Transact-SQL statements for single-table updates if you set the <xref:Microsoft.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> property of the <xref:Microsoft.Data.SqlClient.SqlDataAdapter>. Then, any additional Transact-SQL statements that you do not set are generated by the <xref:Microsoft.Data.SqlClient.SqlCommandBuilder>.

The <xref:Microsoft.Data.SqlClient.SqlCommandBuilder> registers itself as a listener for <xref:Microsoft.Data.SqlClient.SqlDataAdapter.RowUpdating> events whenever you set the <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.DataAdapter%2A> property. You can only associate one <xref:Microsoft.Data.SqlClient.SqlDataAdapter> or <xref:Microsoft.Data.SqlClient.SqlCommandBuilder> object with each other at one time.

To generate INSERT, UPDATE, or DELETE statements, the <xref:Microsoft.Data.SqlClient.SqlCommandBuilder> uses the <xref:Microsoft.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> property to retrieve a required set of metadata automatically. If you change the <xref:Microsoft.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> after the metadata has been retrieved, such as after the first update, you should call the <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> method to update the metadata.

The `SelectCommand` must also return at least one primary key or unique column. If none are present, an **InvalidOperation** exception is generated, and the commands are not generated.

The <xref:Microsoft.Data.SqlClient.SqlCommandBuilder> also uses the <xref:Microsoft.Data.SqlClient.SqlCommand.Connection%2A>, <xref:Microsoft.Data.SqlClient.SqlCommand.CommandTimeout%2A>, and <xref:Microsoft.Data.SqlClient.SqlCommand.Transaction%2A> properties referenced by the <xref:Microsoft.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>. The user should call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if one or more of these properties are modified, or if the <xref:Microsoft.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> itself is replaced. Otherwise the <xref:Microsoft.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:Microsoft.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>, and <xref:Microsoft.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> properties retain their previous values.

If you call <xref:System.ComponentModel.Component.Dispose%2A>, the <xref:Microsoft.Data.SqlClient.SqlCommandBuilder> is disassociated from the <xref:Microsoft.Data.SqlClient.SqlDataAdapter>, and the generated commands are no longer used.


## Examples
The following example uses the <xref:Microsoft.Data.SqlClient.SqlCommand>, along <xref:Microsoft.Data.SqlClient.SqlDataAdapter> and <xref:Microsoft.Data.SqlClient.SqlConnection>, to select rows from a data source. The example is passed a connection string, a query string that is a Transact-SQL SELECT statement, and a string that is the name of the database table. The example then creates a <xref:Microsoft.Data.SqlClient.SqlCommandBuilder>.

[!code-csharp[SqlCommandBuilder#1](~/../sqlclient/doc/samples/SqlCommandBuilder.cs#1)]
]]></format>
            </remarks>
        </SqlCommandBuilder>
        <ctor1>
            <summary>
                Initializes a new instance of the
                <see cref="T:Microsoft.Data.SqlClient.SqlCommandBuilder" />
                class.
            </summary>
            <remarks>
                To be added.
            </remarks>
        </ctor1>
        <ctor2>
            <param name="adapter">
                The name of the
                <see cref="T:Microsoft.Data.SqlClient.SqlDataAdapter" />
                .
            </param>
            <summary>
                Initializes a new instance of the
                <see cref="T:Microsoft.Data.SqlClient.SqlCommandBuilder" />
                class with the associated
                <see cref="T:Microsoft.Data.SqlClient.SqlDataAdapter" />
                object.
            </summary>
            <remarks>
                <format type="text/markdown"><![CDATA[

## Remarks
The <xref:Microsoft.Data.SqlClient.SqlCommandBuilder> registers itself as a listener for <xref:Microsoft.Data.SqlClient.SqlDataAdapter.RowUpdating> events that are generated by the <xref:Microsoft.Data.SqlClient.SqlDataAdapter> specified in this property.

When you create a new instance of <xref:Microsoft.Data.SqlClient.SqlCommandBuilder>, any existing <xref:Microsoft.Data.SqlClient.SqlCommandBuilder> associated with this <xref:Microsoft.Data.SqlClient.SqlDataAdapter> is released.
]]></format>
            </remarks>
        </ctor2>
        <ApplyParameterInfo>
            <param name="parameter">
                To be added.
            </param>
            <param name="datarow">
                To be added.
            </param>
            <param name="statementType">
                To be added.
            </param>
            <param name="whereClause">
                To be added.
            </param>
            <summary>
                To be added.
            </summary>
            <remarks>
                To be added.
            </remarks>
        </ApplyParameterInfo>
        <CatalogLocation>
            <summary>
                Sets or gets the
                <see cref="T:System.Data.Common.CatalogLocation" />
                for an instance of the
                <see cref="T:Microsoft.Data.SqlClient.SqlCommandBuilder" />
                class.
            </summary>
            <value>
                A
                <see cref="T:System.Data.Common.CatalogLocation" />
                object.
            </value>
            <remarks>
                To be added.
            </remarks>
        </CatalogLocation>
        <CatalogSeparator>
            <summary>
                Sets or gets a string used as the catalog separator for an instance of the
                <see cref="T:Microsoft.Data.SqlClient.SqlCommandBuilder" />
                class.
            </summary>
            <value>
                A string that indicates the catalog separator for use with an instance of the
                <see cref="T:Microsoft.Data.SqlClient.SqlCommandBuilder" />
                class.
            </value>
            <remarks>
                To be added.
            </remarks>
        </CatalogSeparator>
        <DataAdapter>
            <summary>Gets or sets a <see cref="T:Microsoft.Data.SqlClient.SqlDataAdapter" /> object for which Transact-SQL statements are automatically generated.</summary>
            <value>A <see cref="T:Microsoft.Data.SqlClient.SqlDataAdapter" /> object.</value>
            <remarks>
                <format type="text/markdown"><![CDATA[  

## Remarks  
The <xref:Microsoft.Data.SqlClient.SqlCommandBuilder> registers itself as a listener for <xref:Microsoft.Data.SqlClient.SqlDataAdapter.RowUpdating> events that are generated by the <xref:Microsoft.Data.SqlClient.SqlDataAdapter> specified in this property.  

When you create a new instance of <xref:Microsoft.Data.SqlClient.SqlCommandBuilder>, any existing <xref:Microsoft.Data.SqlClient.SqlCommandBuilder> associated with this <xref:Microsoft.Data.SqlClient.SqlDataAdapter> is released.  

]]></format>
            </remarks>
        </DataAdapter>
        <DeriveParameters>
            <param name="command">The <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> referencing the stored procedure from which the parameter information is to be derived. The derived parameters are added to the <see cref="P:Microsoft.Data.SqlClient.SqlCommand.Parameters" /> collection of the <see cref="T:Microsoft.Data.SqlClient.SqlCommand" />.</param>
            <summary>Retrieves parameter information from the stored procedure specified in the <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> and populates the <see cref="P:Microsoft.Data.SqlClient.SqlCommand.Parameters" /> collection of the specified <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object.</summary>
            <remarks>
                <format type="text/markdown"><![CDATA[  

## Remarks  
`DeriveParameters` overwrites any existing parameter information for the `SqlDbCommand`.  

`DeriveParameters` requires an additional call to the database to obtain the information. If the parameter information is known in advance, it is more efficient to populate the parameters collection by setting the information explicitly.  

You can only use `DeriveParameters` with stored procedures. You cannot use `DeriveParameters` with extended stored procedures. You cannot use `DeriveParameters` to populate the <xref:Microsoft.Data.SqlClient.SqlParameterCollection> with arbitrary Transact-SQL statements, such as a parameterized SELECT statement.  

For more information, see [Configuring Parameters and Parameter Data Types](~/docs/framework/data/adonet/configuring-parameters-and-parameter-data-types.md).  

]]></format>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The command text is not a valid stored procedure name.</exception>
        </DeriveParameters>
        <Dispose>
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </Dispose>
        <GetDeleteCommand1>
            <summary>Gets the automatically generated <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object required to perform deletions on the database.</summary>
            <remarks>
                <format type="text/markdown"><![CDATA[  

## Remarks  
An application can use the <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> method for informational or troubleshooting purposes because it returns the <xref:Microsoft.Data.SqlClient.SqlCommand> object to be executed.  

You can also use <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> as the basis of a modified command. For example, you might call <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> and modify the <xref:Microsoft.Data.SqlClient.SqlCommand.CommandTimeout%2A> value, and then explicitly set that on the <xref:Microsoft.Data.SqlClient.SqlDataAdapter>.  

After the SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way. Otherwise, the <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> will still be using information from the previous statement, which might not be correct. The SQL statements are first generated when the application calls either <xref:System.Data.Common.DbDataAdapter.Update%2A> or <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>.  

For more information, see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  

]]></format>
            </remarks>
        </GetDeleteCommand1>
        <GetDeleteCommand2>
            <summary>Gets the automatically generated <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object required to perform deletions on the database.</summary>
            <returns>The automatically generated <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object required to perform deletions.</returns>
            <remarks>
                <format type="text/markdown"><![CDATA[  

## Remarks  
An application can use the <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> method for informational or troubleshooting purposes because it returns the <xref:Microsoft.Data.SqlClient.SqlCommand> object to be executed.  

You can also use <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> as the basis of a modified command. For example, you might call <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> and modify the <xref:Microsoft.Data.SqlClient.SqlCommand.CommandTimeout%2A> value, and then explicitly set that on the <xref:Microsoft.Data.SqlClient.SqlDataAdapter>.  

After the SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way. Otherwise, the <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> will still be using information from the previous statement, which might not be correct. The SQL statements are first generated when the application calls either <xref:System.Data.Common.DbDataAdapter.Update%2A> or <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>.  

For more information, see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  

]]></format>
            </remarks>
        </GetDeleteCommand2>
        <GetDeleteCommand3>
            <param name="useColumnsForParameterNames">If <see langword="true" />, generate parameter names matching column names if possible. If <see langword="false" />, generate <c>@p1</c>, <c>@p2</c>, and so on.</param>
            <summary>Gets the automatically generated <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object that is required to perform deletions on the database.</summary>
            <returns>The automatically generated <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object that is required to perform deletions.</returns>
            <remarks>
                <format type="text/markdown"><![CDATA[  

## Remarks  
An application can use the <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> method for informational or troubleshooting purposes because it returns the <xref:Microsoft.Data.SqlClient.SqlCommand> object to be executed.  

You can also use <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> as the basis of a modified command. For example, you might call <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> and modify the <xref:Microsoft.Data.SqlClient.SqlCommand.CommandTimeout%2A> value, and then explicitly set that on the <xref:Microsoft.Data.SqlClient.SqlDataAdapter>.  

After the SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way. Otherwise, the <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> will still be using information from the previous statement, which might not be correct. The SQL statements are first generated when the application calls either <xref:System.Data.Common.DbDataAdapter.Update%2A> or <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>.  

The default behavior, when generating parameter names, is to use `@p1`, `@p2`, and so on for the various parameters. Passing `true` for the `useColumnsForParameterNames` parameter lets you force the <xref:System.Data.OleDb.OleDbCommandBuilder> to generate parameters based on the column names instead. This succeeds only if the following conditions are met:  

-   The <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength> returned from the **GetSchema** method call and found in the <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> collection has been specified and its length is equal to or greater than the generated parameter name.  

-   The generated parameter name meets the criteria specified in the <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern> returned from the **GetSchema** method call and found in the <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> collection regular expression.  

-   A <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat> returned from the **GetSchema** method call and found in the <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> collection is specified.  

For more information, see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  

]]></format>
            </remarks>
        </GetDeleteCommand3>
        <GetInsertCommand1>
            <summary>Gets the automatically generated <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object that is required to perform insertions on the database.</summary>
            <remarks>
                <format type="text/markdown"><![CDATA[  
        
## Remarks  
An application can use the <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> method for informational or troubleshooting purposes because it returns the <xref:Microsoft.Data.SqlClient.SqlCommand> object to be executed.  

You can also use <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> as the basis of a modified command. For example, you might call <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> and modify the <xref:Microsoft.Data.SqlClient.SqlCommand.CommandTimeout%2A> value, and then explicitly set that on the <xref:Microsoft.Data.SqlClient.SqlDataAdapter>.  

After the Transact-SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way. Otherwise, the <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> will still be using information from the previous statement, which might not be correct. The Transact-SQL statements are first generated when the application calls either <xref:System.Data.Common.DbDataAdapter.Update%2A> or <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>.  

For more information, see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  

]]></format>
            </remarks>
        </GetInsertCommand1>
        <GetInsertCommand2>
            <summary>Gets the automatically generated <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object required to perform insertions on the database.</summary>
            <returns>The automatically generated <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object required to perform insertions.</returns>
            <remarks>
                <format type="text/markdown"><![CDATA[  

## Remarks  
An application can use the <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> method for informational or troubleshooting purposes because it returns the <xref:Microsoft.Data.SqlClient.SqlCommand> object to be executed.  

You can also use <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> as the basis of a modified command. For example, you might call <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> and modify the <xref:Microsoft.Data.SqlClient.SqlCommand.CommandTimeout%2A> value, and then explicitly set that on the <xref:Microsoft.Data.SqlClient.SqlDataAdapter>.  

After the Transact-SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way. Otherwise, the <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> will still be using information from the previous statement, which might not be correct. The Transact-SQL statements are first generated when the application calls either <xref:System.Data.Common.DbDataAdapter.Update%2A> or <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>.  

For more information, see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  

]]></format>
            </remarks>
        </GetInsertCommand2>
        <GetInsertCommand3>
            <param name="useColumnsForParameterNames">If <see langword="true" />, generate parameter names matching column names if possible. If <see langword="false" />, generate <c>@p1</c>, <c>@p2</c>, and so on.</param>
            <summary>Gets the automatically generated <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object that is required to perform insertions on the database.</summary>
            <returns>The automatically generated <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object that is required to perform insertions.</returns>
            <remarks>
                <format type="text/markdown"><![CDATA[  

## Remarks  
An application can use the <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> method for informational or troubleshooting purposes because it returns the <xref:Microsoft.Data.SqlClient.SqlCommand> object to be executed.  

You can also use <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> as the basis of a modified command. For example, you might call <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> and modify the <xref:Microsoft.Data.SqlClient.SqlCommand.CommandTimeout%2A> value, and then explicitly set that on the <xref:Microsoft.Data.SqlClient.SqlDataAdapter>.  

After the Transact-SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way. Otherwise, the <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> will still be using information from the previous statement, which might not be correct. The Transact-SQL statements are first generated when the application calls either <xref:System.Data.Common.DbDataAdapter.Update%2A> or <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>.  

The default behavior, when generating parameter names, is to use `@p1`, `@p2`, and so on for the various parameters. Passing `true` for the `useColumnsForParameterNames` parameter lets you force the <xref:System.Data.OleDb.OleDbCommandBuilder> to generate parameters based on the column names instead. This succeeds only if the following conditions are met:  

-   The <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength> returned from the **GetSchema** method call and found in the <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> collection has been specified and its length is equal to or greater than the generated parameter name.  

-   The generated parameter name meets the criteria specified in the <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern> returned from the **GetSchema** method call and found in the <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> collection regular expression.  

-   A <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat> returned from the **GetSchema** method call and found in the <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> collection is specified.  

For more information, see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  

]]></format>
            </remarks>
        </GetInsertCommand3>
        <GetParameterName1>
            <param name="parameterOrdinal">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </GetParameterName1>
        <GetParameterName2>
            <param name="parameterName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </GetParameterName2>
        <GetParameterPlaceholder>
            <param name="parameterOrdinal">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </GetParameterPlaceholder>
        <GetSchemaTable>
            <param name="srcCommand">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </GetSchemaTable>
        <GetUpdateCommand1>
            <summary>Gets the automatically generated <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object required to perform updates on the database.</summary>
            <remarks>
                <format type="text/markdown"><![CDATA[  
        
## Remarks  
An application can use the <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> method for informational or troubleshooting purposes because it returns the <xref:Microsoft.Data.SqlClient.SqlCommand> object to be executed.  

You can also use <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> as the basis of a modified command. For example, you might call <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> and modify the <xref:Microsoft.Data.SqlClient.SqlCommand.CommandTimeout%2A> value, and then explicitly set that on the <xref:Microsoft.Data.SqlClient.SqlDataAdapter>.  

After the Transact-SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way. Otherwise, the <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> will still be using information from the previous statement, which might not be correct. The Transact-SQL statements are first generated when the application calls either <xref:System.Data.Common.DbDataAdapter.Update%2A> or <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>.  

For more information, see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  

]]></format>
            </remarks>
        </GetUpdateCommand1>
        <GetUpdateCommand2>
            <summary>Gets the automatically generated <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object required to perform updates on the database.</summary>
            <returns>The automatically generated <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object that is required to perform updates.</returns>
            <remarks>
                <format type="text/markdown"><![CDATA[  

## Remarks  
An application can use the <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> method for informational or troubleshooting purposes because it returns the <xref:Microsoft.Data.SqlClient.SqlCommand> object to be executed.  

You can also use <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> as the basis of a modified command. For example, you might call <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> and modify the <xref:Microsoft.Data.SqlClient.SqlCommand.CommandTimeout%2A> value, and then explicitly set that on the <xref:Microsoft.Data.SqlClient.SqlDataAdapter>.  

After the Transact-SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way. Otherwise, the <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> will still be using information from the previous statement, which might not be correct. The Transact-SQL statements are first generated when the application calls either <xref:System.Data.Common.DbDataAdapter.Update%2A> or <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>.  

For more information, see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  

]]></format>
            </remarks>
        </GetUpdateCommand2>
        <GetUpdateCommand3>
            <param name="useColumnsForParameterNames">If <see langword="true" />, generate parameter names matching column names if possible. If <see langword="false" />, generate <c>@p1</c>, <c>@p2</c>, and so on.</param>
            <summary>Gets the automatically generated <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object required to perform updates on the database.</summary>
            <returns>The automatically generated <see cref="T:Microsoft.Data.SqlClient.SqlCommand" /> object required to perform updates.</returns>
            <remarks>
                <format type="text/markdown"><![CDATA[  
        
## Remarks  
An application can use the <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> method for informational or troubleshooting purposes because it returns the <xref:Microsoft.Data.SqlClient.SqlCommand> object to be executed.  

You can also use <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> as the basis of a modified command. For example, you might call <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> and modify the <xref:Microsoft.Data.SqlClient.SqlCommand.CommandTimeout%2A> value, and then explicitly set that on the <xref:Microsoft.Data.SqlClient.SqlDataAdapter>.  

After the Transact-SQL statement is first generated, the application must explicitly call <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> if it changes the statement in any way. Otherwise, the <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> will still be using information from the previous statement, which might not be correct. The Transact-SQL statements are first generated when the application calls either <xref:System.Data.Common.DbDataAdapter.Update%2A> or <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>.  

The default behavior, when generating parameter names, is to use `@p1`, `@p2`, and so on for the various parameters. Passing `true` for the `useColumnsForParameterNames` parameter lets you force the <xref:System.Data.OleDb.OleDbCommandBuilder> to generate parameters based on the column names instead. This succeeds only if the following conditions are met:  

-   The <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength> returned from the **GetSchema** method call and found in the <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> collection has been specified and its length is equal to or greater than the generated parameter name.  

-   The generated parameter name meets the criteria specified in the <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern> returned from the **GetSchema** method call and found in the <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> collection regular expression.  

-   A <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat> returned from the **GetSchema** method call and found in the <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> collection is specified.  

For more information, see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  

]]></format>
            </remarks>
        </GetUpdateCommand3>
        <InitializeCommand>
            <param name="command">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </InitializeCommand>
        <QuoteIdentifier>
            <param name="unquotedIdentifier">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </QuoteIdentifier>
        <QuotePrefix>
            <summary>Gets or sets the starting character or characters to use when specifying SQL Server database objects, such as tables or columns, whose names contain characters such as spaces or reserved tokens.</summary>
            <value>The starting character or characters to use. The default is an empty string.</value>
            <remarks>
                <format type="text/markdown"><![CDATA[  
        
## Remarks  

> [!NOTE]
>  Although you cannot change the <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.QuotePrefix%2A> or <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.QuoteSuffix%2A> properties after an insert, update, or delete command has been generated, you can change their settings after calling the `Update` method of a DataAdapter.  

]]></format>
            </remarks>
            <exception cref="T:System.InvalidOperationException">This property cannot be changed after an INSERT, UPDATE, or DELETE command has been generated.</exception>
        </QuotePrefix>
        <QuoteSuffix>
            <summary>Gets or sets the ending character or characters to use when specifying SQL Server database objects, such as tables or columns, whose names contain characters such as spaces or reserved tokens.</summary>
            <value>The ending character or characters to use. The default is an empty string.</value>
            <remarks>
                <format type="text/markdown"><![CDATA[  
        
## Remarks  

> [!NOTE]
>  Although you cannot change the <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.QuotePrefix%2A> or <xref:Microsoft.Data.SqlClient.SqlCommandBuilder.QuoteSuffix%2A> properties after an insert, update, or delete operation has been generated, you can change their settings after calling the `Update` method of a DataAdapter.  

]]></format>
            </remarks>
            <exception cref="T:System.InvalidOperationException">This property cannot be changed after an insert, update, or delete command has been generated.</exception>
        </QuoteSuffix>
        <RefreshSchema>
            <summary>Clears the commands that are associated with this command builder.</summary>
            <remarks>To be added.</remarks>
        </RefreshSchema>
        <SchemaSeparator>
            <summary>Gets or sets the character to be used for the separator between the schema identifier and any other identifiers.</summary>
            <value>The character to be used as the schema separator.</value>
            <remarks>
                <format type="text/markdown"><![CDATA[  
        
## Remarks  
Generally, database servers indicate the schema for a identifier by separating the schema name from the identifier with some character. For example, SQL Server uses a period, creating complete identifiers such as Person.CustomerName, where "Person" is the schema name and "CustomerName" is the identifier. Setting this property lets developers modify this behavior.  

]]></format>
            </remarks>
        </SchemaSeparator>
        <SetRowUpdatingHandler>
            <param name="adapter">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </SetRowUpdatingHandler>
        <UnquoteIdentifier>
            <param name="quotedIdentifier">The identifier that will have its embedded quotes removed.</param>
            <summary>Given a quoted identifier, returns the correct unquoted form of that identifier. This includes correctly unescaping any embedded quotes in the identifier.</summary>
            <returns>The unquoted identifier, with embedded quotes properly unescaped.</returns>
            <remarks>To be added.</remarks>
            <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Connecting and Retrieving Data in ADO.NET</related>
            <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">Using the .NET Framework Data Provider for SQL Server</related>
            <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET Overview</related>
        </UnquoteIdentifier>
    </members>
</docs>
