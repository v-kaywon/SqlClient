<docs>
    <members name="SqlColumnEncryptionCngProvider">
        <SqlColumnEncryptionCngProvider>
            <summary>The CMK Store provider implementation for using the Microsoft Cryptography API: Next Generation (CNG) with 
                                        <see href="https://docs.microsoft.com/sql/relational-databases/security/encryption/always-encrypted-database-engine">Always Encrypted</see>.
            </summary>
            <remarks>
                <format type="text/markdown"><![CDATA[  
  
                    ## Remarks  
                    Enables storing Always Encrypted column master key keys in a store, such as a hardware security module (HSM), that supports the Microsoft Cryptography API: Next Generation (CNG).  
  
                ]]></format>
            </remarks>
        </SqlColumnEncryptionCngProvider>
        <ctor>
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.SqlClient.SqlColumnEncryptionCngProvider" /> class.</summary>
            <remarks>To be added.</remarks>
        </ctor>
        <DecryptColumnEncryptionKey>
            <param name="masterKeyPath">The master key path.</param>
            <param name="encryptionAlgorithm">The encryption algorithm.</param>
            <param name="encryptedColumnEncryptionKey">The encrypted column encryption key.</param>
            <summary>Decrypts the given encrypted value using an asymmetric key specified by the key path and the specified algorithm. The key path will be in the format of [ProviderName]/KeyIdentifier 
                        and should be an asymmetric key stored in the specified CNG key store provider. The valid algorithm used to encrypt/decrypt the CEK is 'RSA_OAEP'.
            </summary>
            <returns>The decrypted column encryption key.</returns>
            <remarks>To be added.</remarks>
        </DecryptColumnEncryptionKey>
        <EncryptColumnEncryptionKey>
            <param name="masterKeyPath">The master key path.</param>
            <param name="encryptionAlgorithm">The encryption algorithm.</param>
            <param name="columnEncryptionKey">The encrypted column encryption key.</param>
            <summary>Encrypts the given plain text column encryption key using an asymmetric key specified by the key path and the specified algorithm. The key path will be in the format of [ProviderName]/KeyIdentifier and should be an asymmetric key stored in the specified CNG key store provider. The valid algorithm used to encrypt/decrypt the CEK is 'RSA_OAEP'.</summary>
            <returns>The encrypted column encryption key.</returns>
            <remarks>To be added.</remarks>
        </EncryptColumnEncryptionKey>
        <ProviderName>
            <summary>A constant string for the provider name 'MSSQL_CNG_STORE'.</summary>
            <remarks>To be added.</remarks>
        </ProviderName>
        <SignColumnMasterKeyMetadata>
            <param name="masterKeyPath">The column master key path. The path format is specific to a key store provider.</param>
            <param name="allowEnclaveComputations"><see langword="true" /> to indicate that the column master key supports enclave computations; otherwise, <see langword="false" />.</param>
            <summary>Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.</summary>
            <returns>The signature of the column master key metadata.</returns>
            <remarks>
                <format type="text/markdown"><![CDATA[  
  
                ## Remarks  
                The <xref:Microsoft.Data.SqlClient.SqlColumnEncryptionCngProvider.SignColumnMasterKeyMetadata%2A> method must be implemented by the corresponding key store providers. 
                <xref:Microsoft.Data.SqlClient.SqlColumnEncryptionCngProvider.SignColumnMasterKeyMetadata%2A> should use an asymmetric key identified by a key path and sign the masterkey metadata consisting 
                of `masterKeyPath`, `allowEnclaveComputations`, and providerName.  
  
                ]]></format>
            </remarks>
        </SignColumnMasterKeyMetadata>
        <VerifyColumnMasterKeyMetadata>
            <param name="masterKeyPath">The complete path of an asymmetric key. The path format is specific to a key store provider.</param>
            <param name="allowEnclaveComputations">A Boolean that indicates if this key can be sent to the trusted enclave.</param>
            <param name="signature">The master key metadata signature.</param>
            <summary>This function must be implemented by the corresponding Key Store providers. This function should use an asymmetric key identified by a key path and verify the masterkey metadata consisting of (masterKeyPath, allowEnclaveComputations, providerName).</summary>
            <returns>A Boolean that indicates if the master key metadata can be verified based on the provided signature.</returns>
            <remarks>To be added.</remarks>
        </VerifyColumnMasterKeyMetadata>
    </members>
</docs>
