<docs>
    <members name="SqlBulkCopyColumnMappingCollection">
        <SqlBulkCopyColumnMappingCollection>
            <summary>Collection of <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> objects that inherits from <see cref="T:System.Collections.CollectionBase" />.</summary>
            <remarks>
                <format type="text/markdown"><![CDATA[  

## Remarks  
Column mappings define the mapping between data source and the target table.  

If mappings are not defined - that is, the <xref:Microsoft.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> collection is empty - the columns are mapped implicitly based on ordinal position. 
For this to work, source and target schemas must match. If they do not, an <xref:System.InvalidOperationException> is thrown.  

If the <xref:Microsoft.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> collection is not empty, not every column present in the data source has to be specified. Those not mapped by the collection are 
ignored.  

You can refer to source and target columns by either name or ordinal. You can mix by-name and by-ordinal column references in the same mappings collection.  

## Examples  
The following example bulk copies data from a source table in the **AdventureWorks** sample database to a destination table in the same database. 
Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. 
<xref:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping> are added to the <xref:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection> for the 
<xref:Microsoft.Data.SqlClient.SqlBulkCopy> object to create a column map for the bulk copy.  

> [!IMPORTANT]
> This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). 
This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to 
use a Transact-SQL `INSERT … SELECT` statement to copy the data.  

[!code-csharp[SqlBulkCopy.ColumnMappingCollection#1](~/sqlClient/doc/samples/SqlBulkCopy.ColumnMappingCollection/CS/source.cs#1)]

]]></format>
            </remarks>
        </SqlBulkCopyColumnMappingCollection>
        <Add name ="bulkCopyColumnMappingParameter">
            <param name="bulkCopyColumnMapping">The <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> object that describes the mapping to be added to the collection.</param>
            <summary>Adds the specified mapping to the <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection" />.</summary>
            <returns>A <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> object.</returns>
            <remarks>
                <format type="text/markdown"><![CDATA[  

## Examples  
The following example bulk copies data from a source table in the **AdventureWorks** sample database to a destination table in the same database. 
Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. 
<xref:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping> objects are used to create a column map for the bulk copy.  

> [!IMPORTANT]
> This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). 
This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, 
it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  

[!code-csharp[SqlBulkCopy.ColumnMapping#1](~/sqlClient/doc/samples/SqlBulkCopy_ColumnMapping.cs)]

]]>
</format>
            </remarks>
        </Add>
        <Add name="sourceColumnIndexIntegerAnddestinationColumnIndexInteger">
            <param name="sourceColumnIndex">The ordinal position of the source column within the data source.</param>
            <param name="destinationColumnIndex">The ordinal position of the destination column within the destination table.</param>
            <summary>Creates a new <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> and adds it to the collection, using ordinals to specify both source and destination columns.</summary>
            <returns>A column mapping.</returns>
            <remarks>
                <format type="text/markdown"><![CDATA[  
  
## Remarks  
Mappings in a collection must be uniform: either all integer/integer pairs, all string/string pairs, all integer/string pairs, or all string/integer pairs. If you try to add a 
mapping that is different from others already in the collection, an <xref:System.InvalidOperationException> is thrown.  

## Examples  
The following example bulk copies data from a source table in the **AdventureWorks** sample database to a destination table in the same database. 
Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. 
<xref:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping> objects are used to create a column map for the bulk copy using the ordinal position of the source and destination columns.  

> [!IMPORTANT]
> This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). 
This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a 
Transact-SQL `INSERT … SELECT` statement to copy the data.  

[!code-csharp[SqlBulkCopy.ColumnMappingCollectionOrdinal#1](~/sqlClient/doc/samples/SqlBulkCopy_ColumnMappingCollectionOrdinal.cs)]

]]></format>
            </remarks>
        </Add>
        <Add name="sourceColumnIndexIntegerAnddestinationColumnString">
            <param name="sourceColumnIndex">The ordinal position of the source column within the data source.</param>
            <param name="destinationColumn">The name of the destination column within the destination table.</param>
            <summary>Creates a new <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> and adds it to the collection, using an ordinal for the source column and a string for the destination column.</summary>
            <returns>A column mapping.</returns>
            <remarks>
                <format type="text/markdown"><![CDATA[  

## Remarks  
Mappings in a collection must be uniform: either all integer/integer pairs, all string/string pairs, all integer/string pairs, or all string/integer pairs. 
If you try to add a mapping that is different from others already in the collection, an <xref:System.InvalidOperationException> is thrown.  

## Examples  
The following example bulk copies data from a source table in the **AdventureWorks** sample database to a destination table in the same database. Although the number of columns in the 
destination matches the number of columns in the source, the column names and ordinal positions do not match. <xref:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping> objects are used to create a 
column map for the bulk copy.  

> [!IMPORTANT]
> This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). 
This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a 
Transact-SQL `INSERT … SELECT` statement to copy the data.  

[!code-csharp[SqlBulkCopy_ColumnMappingIndexColName#1](~/sqlClient/doc/samples/SqlBulkCopy_ColumnMappingIndexColName.cs)]

]]></format>
            </remarks>
        </Add>
        <Add name="sourceColumnStringAnddestinationColumnIndexInteger">
            <param name="sourceColumn">The name of the source column within the data source.</param>
            <param name="destinationColumnIndex">The ordinal position of the destination column within the destination table.</param>
            <summary>Creates a new <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> and adds it to the collection, using a column name to describe the source column and an ordinal to specify the destination column.</summary>
            <returns>A column mapping.</returns>
            <remarks>
                <format type="text/markdown"><![CDATA[  
  
## Remarks  
Mappings in a collection must be uniform: either all integer/integer pairs, all string/string pairs, all integer/string pairs, or all string/integer pairs. 
If you try to add a mapping that is different from others already in the collection, an <xref:System.InvalidOperationException> is thrown.  

## Examples  
The following example bulk copies data from a source table in the **AdventureWorks** sample database to a destination table in the same database. 
Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. 
<xref:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping> objects are used to create a column map for the bulk copy.  

> [!IMPORTANT]
> This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). 
This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, 
it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  

[!code-csharp[SqlBulkCopy.ColumnMappingColNameIndex#1](~/sqlClient/doc/samples/SqlBulkCopy_ColumnMappingColNameIndex.cs)]

]]></format>
            </remarks>
        </Add>
        <Add name="sourceColumnStringAnddestinationColumnString">
            <param name="sourceColumn">The name of the source column within the data source.</param>
            <param name="destinationColumn">The name of the destination column within the destination table.</param>
            <summary>Creates a new <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> and adds it to the collection, using column names to specify both source and destination columns.</summary>
            <returns>A column mapping.</returns>
            <remarks>
                <format type="text/markdown"><![CDATA[  

## Remarks  
Mappings in a collection must be uniform: either all integer/integer pairs, all string/string pairs, all integer/string pairs, or all string/integer pairs. 
If you try to add a mapping that is different from others already in the collection, an <xref:System.InvalidOperationException> is thrown.  

## Examples  
The following example bulk copies data from a source table in the **AdventureWorks** sample database to a destination table in the same database. 
Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. The code creates a 
<xref:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping> object by specifying the column names.  

> [!IMPORTANT]
> This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). 
This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, 
it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  

[!code-csharp[SqlBulkCopy.ColumnMappingCollection#1](~/sqlClient/doc/samples/SqlBulkCopy_ColumnMappingCollection.cs)]

]]></format>
            </remarks>
        </Add>
        <Clear>
            <summary>Clears the contents of the collection.</summary>
            <remarks>
                <format type="text/markdown"><![CDATA[  
  
## Remarks  
The <xref:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Clear%2A> method is most commonly used when you use a single <xref:Microsoft.Data.SqlClient.SqlBulkCopy> 
instance to process more than one bulk copy operation. If you create column mappings for one bulk copy operation, you must clear the 
<xref:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection> after the <xref:Microsoft.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> method and before processing the next bulk copy.  

Performing several bulk copies using the same <xref:Microsoft.Data.SqlClient.SqlBulkCopy> instance will usually be more efficient from a performance point of view than using a separate 
<xref:Microsoft.Data.SqlClient.SqlBulkCopy> for each operation.  

## Examples  
The following example performs two bulk copy operations. The first operation copies sales order header information, and the second copies sales order details. 
Although not strictly necessary in this example (because the ordinal positions of the source and destination columns do match), the example defines column mappings for each bulk copy operation. 
The <xref:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Clear%2A> method must be used after the first bulk copy is performed and before the next bulk copy's column mappings are defined.  

> [!IMPORTANT]
> This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). 
This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a 
Transact-SQL `INSERT … SELECT` statement to copy the data.  

[!code-csharp[SqlBulkCopy.ColumnMappingOrdersDetails#1](~/sqlClient/doc/samples/SqlBulkCopy_ColumnMappingOrdersDetails.cs)]

]]></format>
            </remarks>
        </Clear>
        <Contains>
            <param name="value">A valid <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> object.</param>
            <summary>Gets a value indicating whether a specified <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> object exists in the collection.</summary>
            <returns>
            <see langword="true" /> if the specified mapping exists in the collection; otherwise <see langword="false" />.</returns>
        </Contains>
        <CopyTo>
            <param name="array">The one-dimensional <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> array that is the destination of the elements copied from 
            <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection" />. The array must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <summary>Copies the elements of the <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection" /> to an array of <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> 
                    items, starting at a particular index.
            </summary>
        </CopyTo>
        <IndexOf>
            <param name="value">The <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> object for which to search.</param>
            <summary>Gets the index of the specified <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> object.</summary>
            <returns>The zero-based index of the column mapping, or -1 if the column mapping is not found in the collection.</returns>
            <remarks>To be added.</remarks>
        </IndexOf>
        <Insert>
            <param name="index">Integer value of the location within the <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection" /> at which to insert the new 
            <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" />.</param>
            <param name="value">
            <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> object to be inserted in the collection.</param>
            <summary>Insert a new <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> at the index specified.</summary>
            <remarks>To be added.</remarks>
        </Insert>
        <Item>
            <param name="index">The zero-based index of the <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> to find.</param>
            <summary>Gets the <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> object at the specified index.</summary>
            <value>A <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> object.</value>
            <remarks>To be added.</remarks>
        </Item>
        <Remove>
            <param name="value">
            <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> object to be removed from the collection.</param>
            <summary>Removes the specified <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> element from the <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection" />.</summary>
            <remarks>
                <format type="text/markdown"><![CDATA[  
    
## Remarks  
The <xref:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Remove%2A> method is most commonly used when you use a single <xref:Microsoft.Data.SqlClient.SqlBulkCopy> 
instance to process more than one bulk copy operation. If you create column mappings for one bulk copy operation, you must remove mappings that no longer apply after the 
<xref:Microsoft.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> method is called and before defining mapping for the next bulk copy. You can clear the entire collection by using the 
<xref:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Clear%2A> method, or remove mappings individually using the <xref:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Remove%2A> 
method or the <xref:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection.RemoveAt%2A> method.  

Performing several bulk copies using the same <xref:Microsoft.Data.SqlClient.SqlBulkCopy> instance will usually be more efficient from a performance point of view than using a separate 
<xref:Microsoft.Data.SqlClient.SqlBulkCopy> for each operation.  

## Examples  
The following example performs two bulk copy operations. The first operation copies sales order header information, and the second copies sales order details. 
Although not strictly necessary in this example (because the ordinal positions of the source and destination columns do match), the example defines column mappings for each bulk copy operation. 
Both bulk copies include a mapping for the **SalesOrderID**, so rather than clearing the entire collection between bulk copy operations, the example removes all mappings except for the **SalesOrderID** 
mapping and then adds the appropriate mappings for the second bulk copy operation.  

> [!IMPORTANT]
> This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). 
This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a 
Transact-SQL `INSERT … SELECT` statement to copy the data.  

[!code-csharp[SqlBulkCopy.ColumnMappingRemove#1](~/sqlClient/doc/samples/SqlBulkCopy_ColumnMappingRemove.cs)]

]]></format>
            </remarks>
        </Remove>
        <RemoveAt>
            <param name="index">The zero-based index of the <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping" /> object to be removed from the collection.</param>
            <summary>Removes the mapping at the specified index from the collection.</summary>
            <remarks>
                <format type="text/markdown"><![CDATA[  

## Remarks  
The <xref:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection.RemoveAt%2A> method is most commonly used when you use a single <xref:Microsoft.Data.SqlClient.SqlBulkCopy> 
instance to process more than one bulk copy operation. If you create column mappings for one bulk copy operation, you must remove mappings that no longer apply after the 
<xref:Microsoft.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> method is called and before defining mapping for the next bulk copy. You can clear the entire collection by using the 
<xref:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Clear%2A> method, or remove mappings individually using the <xref:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Remove%2A> 
method or the <xref:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection.RemoveAt%2A> method.  

Performing several bulk copies using the same <xref:Microsoft.Data.SqlClient.SqlBulkCopy> instance will usually be more efficient from a performance point of view than using a separate 
<xref:Microsoft.Data.SqlClient.SqlBulkCopy> for each operation.

## Examples  
The following example performs two bulk copy operations. The first operation copies sales order header information, and the second copies sales order details. 
Although not strictly necessary in this example (because the ordinal positions of the source and destination columns do match), the example defines column mappings for each bulk copy operation. 
Both bulk copies include a mapping for the **SalesOrderID**, so rather than clearing the entire collection between bulk copy operations, the example removes all mappings except for the 
**SalesOrderID** mapping and then adds the appropriate mappings for the second bulk copy operation.  

> [!IMPORTANT]
> This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). 
This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a 
Transact-SQL `INSERT … SELECT` statement to copy the data.  

[!code-csharp[SqlBulkCopy.ColumnMappingRemoveAt#1](~/sqlClient/doc/samples/SqlBulkCopy_ColumnMappingRemoveAt.cs)]

]]></format>
            </remarks>
        </RemoveAt>
        <IsSynchronized>
            <summary>Gets a value indicating whether access to the <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection"/> is synchronized (thread safe).</summary>
            <value>`true` if access to the <see cref="T:Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection"/> is synchronized (thread safe); otherwise, `false`.</value>
        </IsSynchronized>
    </members>
</docs>
