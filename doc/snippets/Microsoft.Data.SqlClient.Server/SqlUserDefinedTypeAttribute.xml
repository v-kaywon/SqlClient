<?xml version="1.0"?>
<docs>
    <members name="SqlUserDefinedTypeAttribute">
        <SqlUserDefinedTypeAttribute>
            <summary>Used to mark a type definition in an assembly as a user-defined type (UDT) in SQL Server. The properties on the attribute reflect the physical characteristics used when the type is registered with SQL Server. This class cannot be inherited.</summary>
            <remarks>
                <format type="text/markdown"><![CDATA[  
  
## Remarks  
SQL Server creates a user-defined type that is bound to the type definition that has the <xref:Microsoft.Data.SqlClient.Server.SqlUserDefinedTypeAttribute> custom attribute. Every UDT must be annotated with this attribute. See [CLR User-Defined Types](https://go.microsoft.com/fwlink/?LinkId=128028) for more information about UDTs, including an example of a UDT.  

## Examples  
The following example shows the `UserDefinedType` attribute of the Point UDT.  The UDT is byte-ordered, is named "Point", has a validation method named "ValidatePoint", and uses the native serialization format.  

[!code-csharp[SqlUserDefinedType Example#1](~/../sqlclient/doc/samples/SqlUserDefinedType.cs#1)]

]]></format>
            </remarks>
        </SqlUserDefinedTypeAttribute>
        <ctor>
            <param name="format">One of the <see cref="T:Microsoft.Data.SqlClient.Server.Format" /> values representing the serialization format of the type.</param>
            <summary>A required attribute on a user-defined type (UDT), used to confirm that the given type is a UDT and to indicate the storage format of the UDT.</summary>
            <remarks>
                <format type="text/markdown"><![CDATA[  

## Remarks  
The following example specifies that the `Format` of the user-defined type is `SerializedDataWithMetadata` and the `MaxByteSize` is 8000 bytes.  

## Examples  
[!code-csharp[SqlUserDefinedType1#12](~/../sqlclient/doc/samples/SqlUserDefinedType1.cs#12)]

]]></format>
            </remarks>
        </ctor>
        <Format>
            <summary>The serialization format as a <see cref="T:Microsoft.Data.SqlClient.Server.Format" /> .</summary>
            <value>A <see cref="T:Microsoft.Data.SqlClient.Server.Format" /> value representing the serialization format.</value>
        </Format>
        <IsByteOrdered>
            <summary>Indicates whether the user-defined type is byte ordered.</summary>
            <value>
                <see langword="true" /> if the user-defined type is byte ordered; otherwise <see langword="false" /> .</value>
            <remarks>
                <format type="text/markdown"><![CDATA[  
  
## Remarks  
When set to `true`, the <xref:Microsoft.Data.SqlClient.Server.SqlUserDefinedTypeAttribute.IsByteOrdered%2A> property in effect guarantees that the serialized binary data can be used for semantic ordering of the information. Thus, each instance of a byte-ordered UDT object can only have one serialized representation. When a comparison operation is performed in SQL Server on the serialized bytes, its results should be the same as if the same comparison operation had taken place in managed code.  

The following features are supported when <xref:Microsoft.Data.SqlClient.Server.SqlUserDefinedTypeAttribute.IsByteOrdered%2A> is set to `true`:  

-   The ability to create indexes on columns of this type.  

-   The ability to create primary and foreign keys as well as CHECK and UNIQUE constraints on columns of this type.  

-   The ability to use Transact-SQL ORDER BY, GROUP BY, and PARTITION BY clauses. In these cases, the binary representation of the type is used to determine the order.  

-   The ability to use comparison operators in Transact-SQL statements.  

-   The ability to persist computed columns of this type.  

Note that both the `Native` and `UserDefined` serialization formats support the following comparison operators when <xref:Microsoft.Data.SqlClient.Server.SqlUserDefinedTypeAttribute.IsByteOrdered%2A> is set to `true`:  

-   Equal to (=)  

-   Not equal to (!=)  

-   Greater than (>)  

-   Less than (\<)  

-   Greater than or equal to (>=)  

-   Less than or equal to (<=)  

]]></format>
            </remarks>
        </IsByteOrdered>
        <IsFixedLength>
            <summary>Indicates whether all instances of this user-defined type are the same length.</summary>
            <value>
                <see langword="true" /> if all instances of this type are the same length; otherwise <see langword="false" />.
            </value>
            <remarks>
                <format type="text/markdown"><![CDATA[  
  
## Remarks  
If set to `true`, all instances of UDTs corresponding to this common language runtime (CLR) type must have a length in bytes exactly equal to <xref:Microsoft.Data.SqlClient.Server.SqlUserDefinedTypeAttribute.MaxByteSize%2A>. This attribute is only relevant for UDTs with `UserDefined` serialization <xref:Microsoft.Data.SqlClient.Server.Format>.  

]]></format>
            </remarks>
        </IsFixedLength>
        <MaxByteSize>
            <summary>The maximum size of the instance, in bytes.</summary>
            <value>An <see cref="T:System.Int32" /> value representing the maximum size of the instance.</value>
            <remarks>
                <format type="text/markdown"><![CDATA[  

## Remarks  
You must specify the <xref:Microsoft.Data.SqlClient.Server.SqlUserDefinedTypeAttribute.MaxByteSize%2A> property with the `UserDefined` serialization <xref:Microsoft.Data.SqlClient.Server.Format>.  

When connecting to SQL Server 2005 or earlier, <xref:Microsoft.Data.SqlClient.Server.SqlUserDefinedTypeAttribute.MaxByteSize%2A> must be between 1 and 8000.  

When connecting to SQL Server 2008 or later, set <xref:Microsoft.Data.SqlClient.Server.SqlUserDefinedTypeAttribute.MaxByteSize%2A> between 1 and 8000, for a type whose instances are always 8,000 bytes or less. For types that can have instances larger than 8000, specify -1.  

For a UDT with user-defined serialization specified, <xref:Microsoft.Data.SqlClient.Server.SqlUserDefinedTypeAttribute.MaxByteSize%2A> refers to the total size of the UDT in its serialized form as defined by the user. Consider a UDT with a property of a string of 10 characters (<xref:System.Char>). When the UDT is serialized using a <xref:System.IO.BinaryWriter>, the total size of the serialized string is 22 bytes: 2 bytes per Unicode UTF-16 character, multiplied by the maximum number of characters, plus 2 control bytes of overhead incurred from serializing a binary stream. So, when determining the value of <xref:Microsoft.Data.SqlClient.Server.SqlUserDefinedTypeAttribute.MaxByteSize%2A>, the total size of the serialized UDT must be considered: the size of the data serialized in binary form plus the overhead incurred by serialization.  

This property should not be used with `Native` serialization <xref:Microsoft.Data.SqlClient.Server.Format>.  

]]></format>
            </remarks>
        </MaxByteSize>
        <Name>
            <summary>The SQL Server name of the user-defined type.</summary>
            <value>A <see cref="T:System.String" /> value representing the SQL Server name of the user-defined type.</value>
            <remarks>
                <format type="text/markdown"><![CDATA[  

## Remarks  
The <xref:Microsoft.Data.SqlClient.Server.SqlUserDefinedTypeAttribute.Name%2A> property is not used within SQL Server, but is used by the Microsoft Visual Studio .NET Integrated Development Environment (IDE).  

]]></format>
            </remarks>
        </Name>
        <ValidationMethodName>
            <summary>The name of the method used to validate instances of the user-defined type.</summary>
            <value>A <see cref="T:System.String" /> representing the name of the method used to validate instances of the user-defined type.</value>
            <remarks>
                <format type="text/markdown"><![CDATA[  

## Remarks  
The method specified by this attribute validates instances of the UDT when the UDT has been deserialized from a binary value that is not trusted.  

]]></format>
            </remarks>
        </ValidationMethodName>
    </members>
</docs>
